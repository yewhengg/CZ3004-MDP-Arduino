void exploration()
{
  restartPID();
  getSensorsDistanceRM(sensorSampleSize);
  while (explorationFlag) {
    if (Serial.available() > 0) {
      sRead = Serial.readString();
      cc = sRead.substring(0,2);
      sRead = sRead.substring(2);
       if(cc == "11"){
        MIN_DISTANCE_CALIBRATE = sRead.toFloat();
      } else if(cc == "12"){
        ANGLE_CALIBRATION_THRESHOLD = sRead.toFloat();
      } else if(cc == "13"){
        LEFT_ANGLE_CALIBRATION_THRESHOLD = sRead.toFloat();
      } else if(cc == "14"){
        kpLeftME = sRead.toFloat();
      } else if(cc == "15"){
        kiLeftME = sRead.toFloat();
      } else if(cc == "16"){
        kdLeftME = sRead.toFloat();
      } else if(cc == "17"){
        kpRightME = sRead.toFloat();
      }else if(cc == "18"){
        kiRightME = sRead.toFloat();
      }else if(cc == "19"){
        kdRightME = sRead.toFloat();
      }else if(cc == "20"){
        oneGridDistance = sRead.toInt();
      }else if(cc == "21"){
        turnGridDistance = sRead.toInt();
      }else if(cc == "22"){
        moveForwardDelay = sRead.toInt();
      }else if(cc == "23"){
        turnDelay = sRead.toInt();
      }else if(cc == "24"){
        explorationDelay = sRead.toInt();
      }else if(cc == "25"){
        calibrationDelay = sRead.toInt();
      }else if(cc == "26"){
        FRONT_SENSORS_DISTANCE_THRESHOLD[0] = sRead.toFloat();
      }else if(cc == "27"){
        FRONT_SENSORS_DISTANCE_THRESHOLD[1] = sRead.toFloat();
      }else if(cc == "28"){
        LEFT_SENSORS_DISTANCE_THRESHOLD[0] = sRead.toFloat();
      }else if(cc == "29"){
        LEFT_SENSORS_DISTANCE_THRESHOLD[1] = sRead.toFloat();
      }else if(cc == "30"){
        SRFRONT_1_RANGE[0] = sRead.toFloat();
      }else if(cc == "31"){
        SRFRONT_1_RANGE[1] = sRead.toFloat();
      }else if(cc == "32"){
        SRFRONT_2_RANGE[0] = sRead.toFloat();
      }else if(cc == "33"){
        SRFRONT_2_RANGE[1] = sRead.toFloat();
      }else if(cc == "30"){
        SRFRONT_3_RANGE[0] = sRead.toFloat();
      }else if(cc == "31"){
        SRFRONT_3_RANGE[1] = sRead.toFloat();
      }
      else if (cc == "UU") {
        goStraightNGrids(1);
        getSensorsDistanceRM(sensorSampleSize);
        delay(explorationDelay);
        debugSensorDistance();
        //debugPID();
        //debugDelay();
        restartPID();
      } else if (cc == "LL") {
        turnLeftOneGrid();
        getSensorsDistanceRM(sensorSampleSize);
        delay(explorationDelay);
        debugSensorDistance();
        // print pid value
        //debugPID();
        //print delay time
        //debugDelay();
        restartPID();
      } else if (cc == "RR") {
        turnRightOneGrid();
        getSensorsDistanceRM(sensorSampleSize);
        delay(explorationDelay);
        debugSensorDistance();
       // debugPID();
        //debugDelay();
        restartPID();
      } else if (cc == "DD") {
        turnRightOneGrid();
        delay(explorationDelay);
        restartPID();
        turnRightOneGrid();
        getSensorsDistanceRM(sensorSampleSize);
        delay(explorationDelay);
        restartPID();
      } else if (cc == "ZZ") {
        getSensorsVoltageRM(sensorSampleSize);
        getSensorsDistanceRM(sensorSampleSize);
        delay(explorationDelay);
        debugSensorDistance();
      } else if (cc == "##") {
        explorationFlag = false;
        delay(explorationDelay);
        return;
      } else if (cc == "CC") {
        calibrate();
      }else if (cc == "DC") {
        delay(10);
        calibrateFrontDistance(0);
        delay(10);
      }else if (cc == "AC") {
        delay(10);
        calibrateFrontAngle();
        delay(10);
      }
    }
  }
}